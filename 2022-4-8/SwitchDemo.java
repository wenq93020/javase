/*switch多分支结构	一般用于等值判断	注意		1、每个case模块中要添加break 防止多次匹配		2、如果多个case中处理的逻辑代码块的功能一致 可以只在最后添加一次处理		3、default表示默认选项 当所有case不匹配的时候 会执行此选项		4、default可以有也可以没有*/public class SwitchDemo{		public static void main(String[] args){				// switch多分支结构		// int random = (int)(Math.random() * 26);		// char ch = (char)('a' + random);		// switch(ch){			// // case 'a':				// // System.out.println("元音: " + ch);				// // break;			// // case 'e':				// // System.out.println("元音: " + ch);				// // break;			// // case 'i':				// // System.out.println("元音: " + ch);				// // break;			// // case 'o':				// // System.out.println("元音: " + ch);				// // break;			// // case 'u':				// // System.out.println("元音: " + ch);				// // break;			// // case 'y':				// // System.out.println("半元音: " + ch);				// // break;			// // case 'w':				// // System.out.println("半元音: " + ch);				// // break;			// // default:				// // System.out.println("辅音: " + ch);				// // break;			// case 'a':			// case 'e':			// case 'i':			// case 'o':			// case 'u':				// System.out.println("元音: " + ch);				// break;			// case 'y':			// case 'w':				// System.out.println("半元音: " + ch);				// break;			// default:				// System.out.println("辅音: " + ch);				// break;		// }							}	}