/*运算符:	算数运算符: + - * / % ++ --		int a = 1;		int b = 2;		// 算数运算符		System.out.println(a + b);// 3		System.out.println(a - b);// -1		System.out.println(a * b);// 2		// 取整数 或者取商		System.out.println(a / b);// 0		// 取余数 或者取模		System.out.println(a % b);// 1		// 单目运算符		// ++	表示在变量原有的基础上+1 谁在前 先运算谁		System.out.println(a++);// 1		System.out.println(++a);// 3		// --	表示在变量原有的基础上-1 谁在前 先运算谁		System.out.println(a--);// 3		System.out.println(--a);// 1	赋值运算符: =		Java中=表示赋值运算符 ==表示相等的操作	扩展赋值运算符: += -= *= /= %=	关系运算符: > < >= <= == !=		用来比较两个值的关系	逻辑运算符: && || !		逻辑运算符一般两边的值不是具体的值 而是一个表达式		&&: 短路与 两边表达式只要有一个是false 整体就是false			两边表达式从左向右开始对比 如果左边的表达式是false 右边不需要进行判断		||: 短路或 两边表达式只要有一个是true 整体就是true			两边表达式从左向右开始对比 如果左边的表达式是true 右边不需要进行判断		!: 取反 如果是true 取反是false 如果是false 取反是true		&: 逻辑与 与短路与效果一样 但是不管第一个的结果是什么 后面的依然会进行比较		|: 逻辑或 与短路或效果一样 但是不管第一个的结果是什么 后面的依然会进行比较	位运算符: & | ^ ~ >> << >>>		只能操作数值 操作的时候会转成二进制进行运算	条件运算符: ? :		使用的时候需要跟一个表达式 表达式如果是true 返回?后的结果 如果是false 返回:后的结果*/public class OperatorDemo{		public static void main(String[] args){				// int a = 1;		// int b = 2;		// // 算数运算符		// System.out.println(a + b);// 3		// System.out.println(a - b);// -1		// System.out.println(a * b);// 2		// // 取整数 或者取商		// System.out.println(a / b);// 0		// // 取余数 或者取模		// System.out.println(a % b);// 1		// // 单目运算符		// // ++	表示在变量原有的基础上+1 谁在前 先运算谁		// System.out.println(a++);// 1		// System.out.println(++a);// 3		// // --	表示在变量原有的基础上-1 谁在前 先运算谁		// System.out.println(a--);// 3		// System.out.println(--a);// 1		// System.out.println(++b+b++);// 6				// // 扩展赋值运算符		// int c = 1;		// // 两种写法意义一样 表示加2的操作		// c = c + 2;		// c += 2;		// 面试题		// 类型转换问题 b是byte b + 1整体变成int类型 需要将int类型的值转化为byte		// 会有精度损失 因此需要强制转换		// 建议在进行操作的时候使用扩展赋值运算符		// byte b = 10;		// b = b + 1;		// b += 1;// 这种写法会自动进行类型转换				// 关系运算符: 返回的是布尔类型的值		// System.out.println(1 > 2);		// System.out.println(1 < 2);		// System.out.println(1 >= 2);		// System.out.println(1 <= 2);		// System.out.println(1 == 2);		// System.out.println(1 != 2);				// 逻辑运算符		// System.out.println(3 > 5 && 3 < 4);		// System.out.println(3 > 5 || 3 < 4);		// System.out.println(!true);		// System.out.println(!false);				// 位运算符		// System.out.println(4 & 5);// 4		// System.out.println(4 | 5);// 5		// System.out.println(4 ^ 5);// 1		// 移码 补码 原码 反码		// System.out.println(~4);// -5		// 左移表示乘以2 右移表示除以2		// System.out.println(2 << 3);		// System.out.println(16 >> 2);				// 条件运算符、三目运算符		// System.out.println(3 > 2 ? 3 : 2);		// System.out.println(false?false:true?false:true);			}	}